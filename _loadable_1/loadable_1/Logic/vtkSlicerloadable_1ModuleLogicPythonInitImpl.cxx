// Generated by vtkWrapPythonInit in VTK/Wrapping
#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>
// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

extern "C" { void PyVTKAddFile_vtkSlicerloadable_1Logic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkSlicerloadable_1Logic(PyObject *dict); }

static PyMethodDef PyvtkSlicerloadable_1ModuleLogicPython_Methods[] = {
{nullptr, nullptr, 0, nullptr}};

#ifdef VTK_PY3K
static PyModuleDef PyvtkSlicerloadable_1ModuleLogicPython_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkSlicerloadable_1ModuleLogicPython", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkSlicerloadable_1ModuleLogicPython_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};
#endif

extern  "C" {VTK_ABI_EXPORT PyObject *real_initvtkSlicerloadable_1ModuleLogicPython(const char * /*unused*/); }

PyObject *real_initvtkSlicerloadable_1ModuleLogicPython(const char * /*unused*/)
{
#ifdef VTK_PY3K
  PyObject *m = PyModule_Create(&PyvtkSlicerloadable_1ModuleLogicPython_Module);
#else
  PyObject *m = Py_InitModule("vtkSlicerloadable_1ModuleLogicPython",
                              PyvtkSlicerloadable_1ModuleLogicPython_Methods);
#endif

  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkSlicerloadable_1ModuleLogicPython");
  }

  const char *depends[3] = {
    "qSlicerBaseQTCLIPython",
    "SlicerBaseLogicPython",
    "MRMLDisplayableManagerPython",
  };

  for (int i = 0; i < 3; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkSlicerloadable_1ModuleLogicPython: No module named %s",
        depends[i]);
    }
  }

  PyVTKAddFile_vtkSlicerloadable_1Logic(d);
  PyVTKAddFile_vtkSlicerloadable_1Logic(d);

  vtkPythonUtil::AddModule("vtkSlicerloadable_1ModuleLogicPython");

  return m;
}

